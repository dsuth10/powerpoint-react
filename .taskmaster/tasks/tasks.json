{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Development Environment",
        "description": "Create a monorepo structure with Docker configuration for both frontend and backend development",
        "details": "Initialize a Git repository with a monorepo structure containing frontend/ and backend/ directories. Create Docker and Docker Compose configurations to ensure consistent development environments. Set up .gitignore files, README.md with setup instructions, and a versions.md file to pin dependency versions (Node 18.19.0, Python 3.12.0, etc.). Configure Docker Compose to run both services together with appropriate networking.",
        "testStrategy": "Verify Docker containers build and run successfully on different platforms (Linux, macOS, Windows). Ensure hot-reloading works in development mode. Test that frontend can reach backend API endpoints through Docker networking.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Monorepo Structure with Git",
            "description": "Create the initial Git repository with the correct monorepo structure including frontend and backend directories, along with other required top-level directories and files.",
            "dependencies": [],
            "details": "Create a new Git repository. Set up the directory structure with frontend/ and backend/ as the main directories. Add additional directories like docs/ and .github/ if needed. Create initial README.md with project overview and setup instructions. Create versions.md file to document and pin dependency versions (Node 18.19.0, Python 3.12.0). Set up appropriate .gitignore files at the root and in subdirectories to exclude node_modules, __pycache__, and other build artifacts.",
            "status": "done",
            "testStrategy": "Verify the repository structure matches the required layout. Confirm all required directories and files exist. Validate .gitignore files contain appropriate entries."
          },
          {
            "id": 2,
            "title": "Create Docker Configuration for Frontend and Backend",
            "description": "Develop Dockerfiles for both frontend and backend services with proper multi-stage builds, non-root user configuration, and correct build contexts.",
            "dependencies": [],
            "details": "Create a Dockerfile for the frontend service using Node 18.19.0 as the base image. Implement multi-stage build to optimize the production image size. Create a Dockerfile for the backend service using Python 3.12.0. Configure both Dockerfiles to run as non-root users for security. Set up proper COPY and RUN commands to install dependencies and build the applications. Configure appropriate EXPOSE ports and entry commands. Add .dockerignore files to exclude unnecessary files from the build context.",
            "status": "done",
            "testStrategy": "Build both Docker images to verify they compile without errors. Check that multi-stage builds are properly implemented. Verify non-root users are configured correctly. Confirm hot reload capability works in development mode."
          },
          {
            "id": 3,
            "title": "Configure Docker Compose for Development Environment",
            "description": "Create a docker-compose.dev.yml file that properly configures both services with appropriate networking, volumes for live reloading, and environment variables.",
            "dependencies": [],
            "details": "Create docker-compose.dev.yml file that defines both frontend and backend services. Configure volumes to mount source code for live reloading during development. Set up proper networking between services so frontend can communicate with backend. Define appropriate environment variables for development. Configure service dependencies to ensure proper startup order. Ensure the configuration works across Windows, macOS, and Linux platforms. Add comments explaining key configuration choices.",
            "status": "done",
            "testStrategy": "Start the services using docker-compose up and verify both containers start successfully. Test live reloading by making changes to source files. Verify frontend can communicate with backend through Docker networking."
          },
          {
            "id": 4,
            "title": "Implement Toolchain Version Pinning",
            "description": "Ensure consistent development environments by pinning toolchain versions in configuration files and documentation.",
            "dependencies": [],
            "details": "Create .nvmrc file in the frontend directory to pin Node.js to version 18.19.0. Add .python-version file in the backend directory to pin Python to version 3.12.0. Update package.json to specify exact versions of npm dependencies. Create requirements.txt with pinned Python package versions. Update versions.md with comprehensive version information for all tools and dependencies. Ensure Docker images use the same versions as specified in these files. Update README.md to reference these version requirements.",
            "status": "done",
            "testStrategy": "Verify that all version files exist and contain the correct version numbers. Confirm Docker builds use the specified versions. Check that package.json and requirements.txt align with the versions specified in versions.md."
          },
          {
            "id": 5,
            "title": "Enhance Repository Documentation and Hygiene",
            "description": "Improve repository documentation and setup additional development tools to ensure a smooth developer experience.",
            "dependencies": [],
            "details": "Update README.md with comprehensive setup instructions, including platform-specific commands for Windows (PowerShell), macOS, and Linux. Create a Makefile with common development tasks (build, test, lint, etc.). Add CONTRIBUTING.md with guidelines for contributors. Create root .gitignore file with comprehensive patterns. Add LICENSE file with appropriate license. Set up .editorconfig for consistent formatting across editors. Document environment variables in a .env.example file. Create a CHANGELOG.md file to track changes.",
            "status": "done",
            "testStrategy": "Review all documentation files for completeness and accuracy. Test Makefile targets to ensure they work as expected. Verify .gitignore patterns are effective by testing with common development artifacts."
          },
          {
            "id": 6,
            "title": "Perform Environment Verification and Smoke Testing",
            "description": "Validate the complete development environment setup with comprehensive testing across platforms and verify service connectivity.",
            "dependencies": [],
            "details": "Create a verification script that checks the repository structure against PRD requirements. Validate Docker configurations for best practices (multi-stage builds, non-root users, etc.). Test docker-compose.dev.yml on Windows, macOS, and Linux to ensure cross-platform compatibility. Verify frontend can reach backend API endpoints through Docker networking. Test hot-reloading functionality in both frontend and backend. Verify all environment variables are properly passed to containers. Document any platform-specific issues and workarounds.",
            "status": "done",
            "testStrategy": "Run the verification script to validate repository structure. Start the development environment on different platforms to verify cross-platform compatibility. Make test API calls from frontend to backend to verify connectivity. Make changes to source files to verify hot-reloading works correctly."
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure CI/CD Pipeline",
        "description": "Set up GitHub Actions workflows for continuous integration and deployment",
        "details": "Create .github/workflows/ci.yml for running tests, linting, and building Docker images. Configure type checking for both TypeScript and Python. Set up linting with ESLint, Stylelint for frontend and Ruff, Black for backend. Configure test runners for Vitest (frontend) and pytest (backend) with coverage thresholds of 90%. Add Docker image building and vulnerability scanning with Trivy. For deployment, create deploy.yml to handle staging and production deployments using Helm charts.",
        "testStrategy": "Verify CI pipeline runs successfully on pull requests. Test that all quality gates (linting, type checking, tests) function correctly. Ensure Docker images are built and scanned properly. Validate that deployment workflow can be triggered manually.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create CI Workflow Scaffolding",
            "description": "Set up the basic structure for GitHub Actions workflows with separate jobs for frontend and backend, including concurrency control and branch filters.",
            "dependencies": [],
            "details": "Create .github/workflows/ci.yml with workflow triggers for pull requests and pushes to main. Configure concurrency settings to prevent parallel runs on the same branch. Set up environment variables for Node 18.19.0 and Python 3.12.0. Define job matrix for frontend and backend. Add PR gating to prevent merging if CI fails. Include caching strategy for node_modules and pip dependencies keyed on lockfiles.",
            "status": "done",
            "testStrategy": "Verify workflow file passes GitHub Actions lint check. Test that workflow triggers correctly on PR and push events."
          },
          {
            "id": 2,
            "title": "Implement Frontend CI Jobs",
            "description": "Configure frontend CI jobs for type checking, linting, testing, and artifact generation.",
            "dependencies": [
              "2.1"
            ],
            "details": "In the ci.yml workflow, create a frontend job that runs on ubuntu-latest. Steps: checkout, setup Node 18.19.0, npm ci, cache node_modules, TypeScript check, ESLint & Stylelint, Vitest with coverage >=90%, upload reports and coverage.",
            "status": "done",
            "testStrategy": "Test the frontend CI job with a sample PR containing both passing and failing tests/lint to verify proper reporting."
          },
          {
            "id": 3,
            "title": "Implement Backend CI Jobs",
            "description": "Configure backend CI jobs for type checking, linting, testing, and artifact generation.",
            "dependencies": [
              "2.1"
            ],
            "details": "Backend job: checkout, setup Python 3.12.0, pip install with cache, run Ruff, Black check, Mypy, pytest with coverage >=90%, upload artifacts.",
            "status": "done",
            "testStrategy": "Test the backend CI job with a sample PR containing both passing and failing tests/lint to verify proper reporting."
          },
          {
            "id": 4,
            "title": "Add Contract and Performance Testing",
            "description": "Implement API contract testing with Schemathesis and basic performance testing with k6.",
            "dependencies": [
              "2.3"
            ],
            "details": "Add contract test job running Schemathesis against /openapi.json. Add k6 smoke tests for chat and slides endpoints with thresholds. Upload results.",
            "status": "done",
            "testStrategy": "Verify contract tests identify schema violations. Ensure performance tests are stable across runs."
          },
          {
            "id": 5,
            "title": "Configure Docker Build and Security Scanning",
            "description": "Set up Docker image building with multi-stage builds and security scanning with Trivy.",
            "dependencies": [
              "2.2",
              "2.3"
            ],
            "details": "Build frontend and backend images with multi-stage builds; enable Docker layer caching. Scan images with Trivy; fail on critical vulns. Generate SBOM.",
            "status": "done",
            "testStrategy": "Test builds with intentionally vulnerable dependency to verify Trivy gating."
          },
          {
            "id": 6,
            "title": "Implement Security Checks",
            "description": "Add dedicated security scanning for both frontend and backend codebases.",
            "dependencies": [
              "2.2",
              "2.3"
            ],
            "details": "Bandit (Python), npm audit (JS/TS), and CodeQL (both) configured. Upload reports and summarise in PR comments.",
            "status": "done",
            "testStrategy": "Seed known vulns and verify detection."
          },
          {
            "id": 7,
            "title": "Create Deployment Workflow",
            "description": "Set up GitHub Actions workflow for deploying to staging and production environments using Helm charts.",
            "dependencies": [
              "2.5"
            ],
            "details": "deploy.yml triggers on main (staging) and tags (prod). OIDC to cluster; Helm charts; pre/post checks; manual approval for prod; rollback on fail.",
            "status": "done",
            "testStrategy": "Deploy to test cluster and validate."
          },
          {
            "id": 8,
            "title": "Implement Release Workflow and Status Reporting",
            "description": "Create a release workflow for building and deploying releases, including status badges and notifications",
            "dependencies": [
              "2.5",
              "2.7"
            ],
            "details": "release.yml builds, Cosign-signs, pushes images. Add badges to README; PR coverage summaries; release notes from conventional commits; Slack/email alerts.",
            "status": "done",
            "testStrategy": "Tag a test release and validate outputs."
          }
        ]
      },
      {
        "id": 3,
        "title": "Define Backend Domain Models",
        "description": "Create Pydantic models for core data structures",
        "details": "Implement Pydantic v2 models for ChatRequest/Response, SlidePlan, ImageMeta, PPTXJob, ErrorResponse with strict validation and camelCase aliases.",
        "testStrategy": "Unit tests for model validation, serialisation, and OpenAPI schema.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Base Model Configuration",
            "description": "Common strict base with alias generator and encoders.",
            "dependencies": [],
            "details": "backend/app/models/base.py",
            "status": "done",
            "testStrategy": "Round-trip and alias tests."
          },
          {
            "id": 2,
            "title": "Chat Models",
            "description": "ChatRequest/ChatResponse",
            "dependencies": [
              "3.1"
            ],
            "details": "Validation for prompt, slideCount, model allow-list.",
            "status": "done",
            "testStrategy": "Valid/invalid payload tests."
          },
          {
            "id": 3,
            "title": "SlidePlan",
            "description": "Title, bullets, notes",
            "dependencies": [
              "3.1"
            ],
            "details": "Length limits, non-empty bullets.",
            "status": "done",
            "testStrategy": "Edge-case tests."
          },
          {
            "id": 4,
            "title": "ImageMeta",
            "description": "url, altText",
            "dependencies": [
              "3.1"
            ],
            "details": "URL validation",
            "status": "done",
            "testStrategy": "URL validators."
          },
          {
            "id": 5,
            "title": "PPTXJob",
            "description": "Job tracking",
            "dependencies": [
              "3.1"
            ],
            "details": "Statuses: pending, processing, completed, failed",
            "status": "done",
            "testStrategy": "Enum enforcement."
          },
          {
            "id": 6,
            "title": "Error Response",
            "description": "Standardised errors",
            "dependencies": [
              "3.1"
            ],
            "details": "errorCode, message, details",
            "status": "done",
            "testStrategy": "Schema tests."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement LLM Service Integration",
        "description": "Service to interact with OpenRouter API for slide outline generation",
        "details": "Async httpx client, retries, parsing to SlidePlan, env-configured keys and model allow-list.",
        "testStrategy": "respx-mocked tests incl. timeouts, 4xx/5xx, malformed payloads.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Config Module",
            "description": "Load OPENROUTER_*, timeouts, logging flags",
            "dependencies": [],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "AsyncClient Factory",
            "description": "httpx.AsyncClient with headers and lifecycle",
            "dependencies": [
              "4.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Request/Response Models",
            "description": "Upstream payload mapping",
            "dependencies": [
              "4.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Request Submission",
            "description": "send_chat_request()",
            "dependencies": [
              "4.2",
              "4.3"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Response Parsing",
            "description": "Strict parse to SlidePlan",
            "dependencies": [
              "4.3",
              "4.4"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Error Handling & Retries",
            "description": "Tenacity backoff + redaction",
            "dependencies": [
              "4.4"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Metrics & Logging",
            "description": "Prometheus + structlog",
            "dependencies": [
              "4.4",
              "4.6"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Rate Limit Handling",
            "description": "429 & Retry-After",
            "dependencies": [
              "4.6"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Unit Tests",
            "description": "Comprehensive respx tests",
            "dependencies": [
              "4.1",
              "4.2",
              "4.3",
              "4.4",
              "4.5",
              "4.6",
              "4.7",
              "4.8"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Integration Test",
            "description": "POST /chat/generate flow",
            "dependencies": [
              "4.9"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Image Generation Service",
        "description": "Generate slide images via provider (e.g., Stability AI)",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "high",
        "details": "Async generation, batching, caching, retries, fallback placeholders, metrics and logging.",
        "testStrategy": "respx-mocked success/error/timeout/rate limit; cache and ordering tests.",
        "subtasks": [
          {
            "id": 1,
            "title": "Config",
            "description": "STABILITY_* envs",
            "dependencies": [],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Async Client",
            "description": "Factory with headers and lifecycle",
            "dependencies": [
              "5.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Prompt Builder",
            "description": "From SlidePlan",
            "dependencies": [],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Schemas",
            "description": "Request/Response models",
            "dependencies": [
              "5.2"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Single Image",
            "description": "generate_image_for_slide()",
            "dependencies": [
              "5.2",
              "5.3",
              "5.4"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Batch Images",
            "description": "generate_images()",
            "dependencies": [
              "5.5"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Caching",
            "description": "In-memory with TTL/size cap",
            "dependencies": [
              "5.3",
              "5.5"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Fallback",
            "description": "Placeholder provider",
            "dependencies": [
              "5.5"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Metrics & Logging",
            "description": "Counters, histograms, redaction",
            "dependencies": [
              "5.5",
              "5.6",
              "5.7"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Comprehensive Tests",
            "description": "All paths covered",
            "dependencies": [
              "5.1",
              "5.2",
              "5.3",
              "5.4",
              "5.5",
              "5.6",
              "5.7",
              "5.8",
              "5.9"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement PPTX Builder Service",
        "description": "Generate PowerPoint from SlidePlans and images",
        "details": "python-pptx with template/layouts, text, images, speaker notes, accessibility, temp file management, progress callbacks, robust errors.",
        "testStrategy": "Unit tests verify slide content and openability; image fallback; error handling.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done"
      },
      {
        "id": 7,
        "title": "Implement Backend API Routes",
        "description": "FastAPI endpoints for chat and slide build",
        "details": "POST /chat/generate, POST /slides/build, GET /slides/download; validation; OpenAPI docs.",
        "testStrategy": "TestClient success/error paths; schema validation.",
        "priority": "high",
        "dependencies": [
          3,
          4,
          5,
          6
        ],
        "status": "done"
      },
      {
        "id": 8,
        "title": "Implement WebSocket Server for Real-time Updates",
        "description": "Socket.IO progress updates",
        "details": "python-socketio server, auth (optional), slide:progress and slide:completed, reconnection/missed updates support.",
        "testStrategy": "Socket client tests for connection, events, reconnection.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "done"
      },
      {
        "id": 9,
        "title": "Implement Backend Observability and Error Handling",
        "description": "Logging, metrics, health, error schema",
        "details": "structlog JSON logs with request IDs, Prometheus /metrics, /health, global exception handlers, standard error schema.",
        "testStrategy": "Verify logs, metrics, health behaviours and consistent error responses.",
        "priority": "medium",
        "dependencies": [
          7,
          8
        ],
        "status": "done"
      },
      {
        "id": 10,
        "title": "Implement Authentication System",
        "description": "Key-only usage with optional JWT/magic-links",
        "status": "done",
        "dependencies": [
          7
        ],
        "priority": "high",
        "details": "API key config; endpoints usable without JWT; WebSocket anonymous sessions; CORS and rate limiting.",
        "testStrategy": "Endpoints work without auth; keys enable real integrations; CORS and sockets verified."
      },
      {
        "id": 11,
        "title": "Setup Frontend Project with Vite and React",
        "description": "Vite + React + TS + Tailwind + shadcn",
        "details": "ESLint/Prettier, Vitest, envs, feature-based structure, absolute imports.",
        "testStrategy": "Dev server, HMR, lint/test setup verified.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done"
      },
      {
        "id": 12,
        "title": "Generate TypeScript API Client from OpenAPI",
        "description": "Type-safe API client and React Query hooks",
        "details": "openapi-typescript-codegen with custom templates; use* hooks; error handling.",
        "testStrategy": "Client compiles; hooks type-safe; mocked tests.",
        "priority": "high",
        "dependencies": [
          7,
          11
        ],
        "status": "done"
      },
      {
        "id": 13,
        "title": "Implement Frontend Routing with TanStack Router",
        "description": "Routes for chat and slides",
        "details": "Root redirect to chat; chat route with optional sessionId; not-found; (optional) guards.",
        "testStrategy": "Route navigation, lazy loading, redirects.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done"
      },
      {
        "id": 14,
        "title": "Implement Frontend State Management with Zustand",
        "description": "Chat and slide stores",
        "details": "Immer middleware; selectors; (optional) persistence; types.",
        "testStrategy": "Store action/selector unit tests.",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Zustand + Immer setup",
            "description": "Typed base store",
            "dependencies": [],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "ChatStore",
            "description": "Messages & sessions",
            "dependencies": [
              "14.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "SlideStore",
            "description": "Generation & progress",
            "dependencies": [
              "14.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Persistence",
            "description": "Local/session storage",
            "dependencies": [
              "14.2",
              "14.3"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Hooks",
            "description": "useChat/useSlides",
            "dependencies": [
              "14.2",
              "14.3",
              "14.4"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 15,
        "title": "Implement WebSocket Hook for Real-time Updates",
        "description": "Socket.io-client hook and typed events",
        "details": "Connection mgmt, auth (optional), progress/completed listeners.",
        "testStrategy": "Mock server integration tests.",
        "priority": "medium",
        "dependencies": [
          8,
          11
        ],
        "status": "done"
      },
      {
        "id": 16,
        "title": "Implement Core Layout Components",
        "description": "Header, Sidebar, MainLayout, loaders/errors, accessibility",
        "details": "Responsive Tailwind layout; theme support (optional).",
        "testStrategy": "A11y checks and responsive tests.",
        "priority": "high",
        "dependencies": [
          11,
          13
        ],
        "status": "done"
      },
      {
        "id": 17,
        "title": "Implement Chat UI Components",
        "description": "ChatContainer, ChatInput, ChatMessage, ModelSelector, SlidePlanPreview",
        "details": "Framer Motion animations; auto-scroll; markdown rendering.",
        "testStrategy": "Component tests for rendering/interaction/a11y.",
        "priority": "high",
        "dependencies": [
          14,
          16
        ],
        "status": "done"
      },
      {
        "id": 18,
        "title": "Implement Slide Generation UI Components",
        "description": "SlideGenerator, ProgressIndicator, DownloadButton, notifications and retries",
        "details": "WebSocket progress; mutation hooks; error boundaries.",
        "testStrategy": "Mocked progress and download tests.",
        "priority": "high",
        "dependencies": [
          15,
          17
        ],
        "status": "done"
      },
      {
        "id": 19,
        "title": "Implement Download Manager",
        "description": "Utility for PPTX downloads (progress, retries; resumable planned)",
        "details": "Fetch + streams; progress events; retry with backoff; resumable via Range (pending); notifications (pending).",
        "testStrategy": "Download progress accuracy; retry behaviour; large file handling.",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Core Utility",
            "description": "Initiate download & save file",
            "dependencies": [],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Resumable Ranges",
            "description": "Range requests + persisted chunks",
            "dependencies": [
              "19.1"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Progress Tracking",
            "description": "ReadableStream + throttled updates",
            "dependencies": [
              "19.1"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Errors & Retries",
            "description": "Backoff, timeouts, circuit breaker",
            "dependencies": [
              "19.1",
              "19.2",
              "19.3"
            ],
            "details": "",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Notifications",
            "description": "Toasts & history",
            "dependencies": [
              "19.3",
              "19.4"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 20,
        "title": "Implement Chat Page Integration",
        "description": "Wire chat UI to API/state/WebSocket",
        "details": "Optimistic UI, error handling, session handling.",
        "testStrategy": "End-to-end chat flow with mocks.",
        "priority": "high",
        "dependencies": [
          12,
          17
        ],
        "status": "done"
      },
      {
        "id": 21,
        "title": "Implement Slide Generation Integration",
        "description": "API + WebSocket + DownloadManager",
        "details": "State machine across idle/generating/completed/error; smooth transitions.",
        "testStrategy": "E2E slide generation and download.",
        "priority": "high",
        "dependencies": [
          15,
          18,
          19,
          20
        ],
        "status": "done"
      },
      {
        "id": 22,
        "title": "Implement Authentication UI",
        "description": "Login/magic link (optional), state & guards",
        "details": "Pending unless production hardening is required.",
        "testStrategy": "Auth E2E tests if enabled.",
        "priority": "medium",
        "dependencies": [
          10,
          13,
          14
        ],
        "status": "pending"
      },
      {
        "id": 23,
        "title": "Implement End-to-End Testing",
        "description": "Cypress tests for core flows and a11y",
        "details": "Prompt \u2192 outline \u2192 generate \u2192 download; auth flow (if enabled); cypress-axe; visual snapshots.",
        "testStrategy": "Run in CI across browsers.",
        "priority": "medium",
        "dependencies": [
          21,
          22
        ],
        "status": "pending"
      },
      {
        "id": 24,
        "title": "Implement Performance Optimisation",
        "description": "Code-splitting, memoisation, caching, WS optimisation, compression",
        "details": "Lazy routes/components; responsive image loading; TanStack Query caching; WS batching/throttling; gzip/brotli.",
        "testStrategy": "Lighthouse audits; bundle budgets; slow network checks.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending"
      },
      {
        "id": 25,
        "title": "Create Kubernetes Deployment Configuration",
        "description": "Helm chart for frontend/backend, ingress, HPA, blue/green",
        "details": "ConfigMaps/Secrets, probes, resources; optional PVs.",
        "testStrategy": "Deploy to test cluster; scale tests; rollout and rollback.",
        "priority": "medium",
        "dependencies": [
          2,
          9,
          24
        ],
        "status": "pending"
      },
      {
        "id": 27,
        "title": "Fix SlidesPage Connection to Chat Store",
        "description": "SlidesPage reads outlines by session and renders generation UI",
        "details": "Empty state messaging; error/loading handling.",
        "testStrategy": "Unit & integration tests for session linkage.",
        "priority": "high",
        "dependencies": [],
        "status": "done"
      },
      {
        "id": 28,
        "title": "Fix Missing SessionId Parameter in Slides Route",
        "description": "Slides route is '/slides/{sessionId}'",
        "details": "SlidesPage extracts sessionId to load relevant outline.",
        "testStrategy": "Direct route access and invalid session handling.",
        "priority": "high",
        "dependencies": [
          27,
          18,
          21
        ],
        "status": "done"
      },
      {
        "id": 30,
        "title": "Update Navigation to Use SessionId Parameter in Slides Route",
        "description": "All nav/redirects include sessionId to preserve context",
        "details": "Sidebar and in-app links updated to '/slides/{sessionId}' and '/chat/{sessionId}'.",
        "testStrategy": "Manual + automated checks of URL/state persistence.",
        "priority": "high",
        "dependencies": [
          28,
          13,
          17,
          20
        ],
        "status": "done"
      },
      {
        "id": 31,
        "title": "Implement Slide Editing API and Services",
        "description": "Backend support for AI-assisted inline editing (titles, bullets, notes, images)",
        "details": "Pydantic EditSlideRequest/Response; text edits via LLM; image replacement via image service; endpoints integrated into slides router; responses feed back into SlidePlan pipeline.",
        "testStrategy": "Unit + integration tests for edit services and endpoints; error paths; verify edited content flows into PPTX.",
        "priority": "high",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Edit Models",
            "description": "EditSlideRequest/Response with targets: title|bullet|notes|image",
            "dependencies": [],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Text Editing Service",
            "description": "edit_slide_text() util using LLM",
            "dependencies": [
              "31.1"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Image Editing Integration",
            "description": "edit_slide_image() via provider",
            "dependencies": [
              "31.1"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "API Endpoints",
            "description": "POST /slides/edit-text and /slides/edit-image",
            "dependencies": [
              "31.1",
              "31.2",
              "31.3"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Tests",
            "description": "Service + API tests including concurrency",
            "dependencies": [
              "31.4"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 32,
        "title": "Implement Slide Editing UI (Frontend)",
        "description": "Inline editing UX for text/notes/images with AI suggestions",
        "details": "Edit controls per element; modal/inline editor; React Query mutations; state updates; error handling; preview where applicable.",
        "testStrategy": "Component + user-flow tests; error and retry handling; persistence through to PPTX generation.",
        "priority": "high",
        "dependencies": [
          17,
          31
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Edit Controls",
            "description": "Buttons/icons for each element; a11y labels",
            "dependencies": [],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Editing Modal/Dialog",
            "description": "Instruction input & current content view; loading/error states",
            "dependencies": [
              "32.1"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "API Integration",
            "description": "useEditSlideText/useEditSlideImage mutations",
            "dependencies": [
              "32.2",
              "31"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "State Updates",
            "description": "Persist edited content in stores; reconcile with outline",
            "dependencies": [
              "32.3"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "E2E Flow",
            "description": "Edit \u2192 Generate PPTX validation",
            "dependencies": [
              "32.4"
            ],
            "details": "",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ]
  }
}