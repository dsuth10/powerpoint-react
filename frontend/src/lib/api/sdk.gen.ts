// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, RefreshApiV1AuthRefreshPostData, RefreshApiV1AuthRefreshPostResponses, RefreshApiV1AuthRefreshPostErrors, GenerateChatOutlineApiV1ChatGeneratePostData, GenerateChatOutlineApiV1ChatGeneratePostResponses, GenerateChatOutlineApiV1ChatGeneratePostErrors, BuildSlidesApiV1SlidesBuildPostData, BuildSlidesApiV1SlidesBuildPostResponses, BuildSlidesApiV1SlidesBuildPostErrors, DownloadPptxApiV1SlidesDownloadGetData, DownloadPptxApiV1SlidesDownloadGetResponses, DownloadPptxApiV1SlidesDownloadGetErrors, HealthApiV1HealthGetData, HealthApiV1HealthGetResponses, MetricsMetricsGetData, MetricsMetricsGetResponses, ReadRootGetData, ReadRootGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiV1AuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh
 */
export const refreshApiV1AuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshApiV1AuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshApiV1AuthRefreshPostResponses, RefreshApiV1AuthRefreshPostErrors, ThrowOnError>({
        url: '/api/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate Chat Outline
 */
export const generateChatOutlineApiV1ChatGeneratePost = <ThrowOnError extends boolean = false>(options: Options<GenerateChatOutlineApiV1ChatGeneratePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateChatOutlineApiV1ChatGeneratePostResponses, GenerateChatOutlineApiV1ChatGeneratePostErrors, ThrowOnError>({
        url: '/api/v1/chat/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Build Slides
 */
export const buildSlidesApiV1SlidesBuildPost = <ThrowOnError extends boolean = false>(options: Options<BuildSlidesApiV1SlidesBuildPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuildSlidesApiV1SlidesBuildPostResponses, BuildSlidesApiV1SlidesBuildPostErrors, ThrowOnError>({
        url: '/api/v1/slides/build',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Download Pptx
 * Serve a generated PPTX file by job ID.
 *
 * Looks for a file named "{jobId}.pptx" in the configured temporary directory.
 * Returns 404 if the file does not exist.
 */
export const downloadPptxApiV1SlidesDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadPptxApiV1SlidesDownloadGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadPptxApiV1SlidesDownloadGetResponses, DownloadPptxApiV1SlidesDownloadGetErrors, ThrowOnError>({
        url: '/api/v1/slides/download',
        ...options
    });
};

/**
 * Health
 */
export const healthApiV1HealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthApiV1HealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthApiV1HealthGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/health',
        ...options
    });
};

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const metricsMetricsGet = <ThrowOnError extends boolean = false>(options?: Options<MetricsMetricsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MetricsMetricsGetResponses, unknown, ThrowOnError>({
        url: '/metrics',
        ...options
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};