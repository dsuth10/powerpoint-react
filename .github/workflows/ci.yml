name: CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

concurrency:
  group: "ci-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0'
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt -r backend/requirements-dev.txt
      - name: Lint backend
        run: make lint
      - name: Test backend (coverage with threshold)
        run: |
          make test
          mkdir -p artifacts/backend
          cp -r backend/htmlcov artifacts/backend/htmlcov || true
          cp backend/coverage.xml artifacts/backend/coverage.xml || true
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: artifacts/backend

      # Bandit security scan for Python code (fail on HIGH severity)
      - name: Bandit security scan
        run: |
          pip install bandit
          bandit -r backend/app -ll --exit-zero | tee bandit-report.txt
          if grep -q 'HIGH' bandit-report.txt; then echo 'High severity issues found!'; exit 1; fi

      # Build backend Docker image for scanning
      - name: Build backend Docker image
        run: |
          docker build -t pptx-backend:ci -f backend/Dockerfile .

      # Trivy image scan (fail on HIGH/CRITICAL vulnerabilities)
      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: pptx-backend:ci
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.txt

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Type-check (tsc --noEmit)
        run: |
          cd frontend
          npx tsc --noEmit
      - name: Lint frontend
        run: |
          cd frontend
          npm run lint
      - name: Stylelint
        run: |
          cd frontend
          npx stylelint "src/**/*.css"
      - name: Test frontend
        run: |
          cd frontend
          npm run test -- --run --coverage
          mkdir -p ../artifacts/frontend
          cp -r coverage ../artifacts/frontend/coverage || true
          cp junit.xml ../artifacts/frontend/junit.xml || true
      - name: npm audit (fail on high/critical)
        run: |
          cd frontend
          npm audit --omit=dev --audit-level=high
      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: artifacts/frontend

  performance:
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        run: |
          sudo apt-get update && sudo apt-get install -y curl gpg
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6
      - name: Run k6 smoke - chat
        run: k6 run backend/scripts/k6_chat.js
      - name: Run k6 smoke - slides
        run: k6 run backend/scripts/k6_slides.js

  docker_frontend:
    runs-on: ubuntu-latest
    needs: [frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend Docker image
        run: |
          docker build -t pptx-frontend:ci -f frontend/Dockerfile ./frontend
      - name: Trivy scan (frontend)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: pptx-frontend:ci
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
      - name: Generate SBOMs
        run: |
          docker sbom pptx-backend:ci > sbom-backend.spdx || true
          docker sbom pptx-frontend:ci > sbom-frontend.spdx || true
          mkdir -p artifacts/sbom
          mv sbom-*.spdx artifacts/sbom/
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: artifacts/sbom

  report:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      pull-requests: write
    steps:
      - name: Post coverage summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const body = `### CI Summary\n\n- Backend: coverage enforced (>=90%), artifacts uploaded (backend-artifacts)\n- Frontend: coverage enforced (>=90%), artifacts uploaded (frontend-artifacts)\n- Security: Bandit + Trivy run\n- SBOMs: generated for backend/frontend images\n\nDownload artifacts from the Actions run for detailed reports.`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body,
            });